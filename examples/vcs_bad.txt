definitions:
__new_fml:x = timestamp.max(msg_t.ts(__fml:msg),__node.ts(__prm:V0))

node.ts(V0) = (__fml:y if V0 = __prm:V0 else __node.ts(V0))

__m_loc:outgoing = __loc:outgoing_nd

__m_loc:outgoing_a = __loc:outgoing_nd_a

__ts0__new_fml:dst_id = msg_t.sender_id(__fml:msg)

__new_loc:outgoing = (__loc:outgoing_nd_b if __ts0_a else __m_loc:outgoing_a)

__ts0__new_fml:msg = __ts0__new_fml:outgoing

__ts0__new_prm:V0_a = __prm:V0

node.reply_ts(V0,V1) = (__node.reply_ts(V0,V1) if __ts0_a else (__node.reply_ts(V0,V1) if __ts0__ts0_b_a else ((msg_t.ts(__fml:msg) if (V0 = __prm:V0 & V1 = msg_t.sender_id(__fml:msg)) else __node.reply_ts(V0,V1)) if __ts0__ts0__ts0_a_a_a else __node.reply_ts(V0,V1))))

node.request_ts(V0,V1) = ((msg_t.ts(__fml:msg) if (V0 = __prm:V0 & V1 = msg_t.sender_id(__fml:msg)) else __node.request_ts(V0,V1)) if __ts0_a else ((0 if (V0 = __prm:V0 & V1 = msg_t.sender_id(__fml:msg)) else __node.request_ts(V0,V1)) if __ts0__ts0_b_a else __node.request_ts(V0,V1)))

__ts0__new_prm:V0 = __ts0__new_prm:V0_a

__ts0__ts0__ts0_a_a_a = msg_t.kind(__fml:msg) = reply

__ts0__new_fml:outgoing = __new_loc:outgoing

__ts0__new_fml:dst = node.sock.id(__ts0__new_fml:dst_id)

__ts0__ts0_b_a = msg_t.kind(__fml:msg) = release

net.sent(V0,V1,V2) = ((true if (V0 = node.sock.id(__ts0__new_prm:V0) & V1 = __ts0__new_fml:dst & V2 = __ts0__new_fml:msg) else __net.sent(V0,V1,V2)) if __ts0_a else __net.sent(V0,V1,V2))

__ts0_a = msg_t.kind(__fml:msg) = request

node.state(V0) = (node.critical if V0 = __prm:V0 else __node.state(V0))

__new_prm:V0_a = __prm:V0

node.client_state(V0) = __node.client_state(V0)

__ts0_a_a = __node.state(__prm:V0) = node.waiting & (forall X. X:host_id ~= __prm:V0 -> (node.request_ts(__prm:V0,X) = 0 | node.lexord(__prm:V0,node.request_ts(__prm:V0,__prm:V0),__prm:V0,node.request_ts(__prm:V0,X),X)) & node.reply_ts(__prm:V0,X) > node.request_ts(__prm:V0,__prm:V0))

timestamp.max(X,Y) = (Y:timestamp if (X <= Y) else X)

M1:msg_t < M2 = msg_t.ts(M1) < msg_t.ts(M2)

node.lexord(V0,X1,Y1,X2,Y2) = X1:timestamp < X2 | X1 = X2 & Y1:host_id < Y2

axioms:
__node.client_state(V0) = __node.state(V0)

__node.state(X) = node.critical & __node.state(Y) = node.critical -> X = Y

__net.sent(S,node.sock.id(Y),M) & msg_t.sender_id(M) = V0 -> __node.ts(V0) >= msg_t.ts(M)

__net.sent(S,node.sock.id(Y),M) -> S = node.sock.id(msg_t.sender_id(M))

__node.request_ts(V0,V0) > 0 & msg_t.ts(M) = __node.request_ts(V0,V0) & msg_t.kind(M) = request & msg_t.sender_id(M) = V0 & Y:host_id ~= V0 -> __net.sent(node.sock.id(V0),node.sock.id(Y),M) | __node.request_ts(Y,V0) = __node.request_ts(V0,V0)

Y:host_id ~= V0 -> __node.reply_ts(V0,Y) <= __node.ts(Y)

__node.state(V0) = node.waiting | __node.state(V0) = node.critical -> __node.request_ts(V0,V0) > 0

__net.sent(node.sock.id(V0),node.sock.id(Y),M) & msg_t.kind(M) = release & msg_t.sender_id(M) = V0 -> __node.request_ts(V0,V0) = 0 | msg_t.ts(M) < __node.request_ts(V0,V0)

__net.sent(X,node.sock.id(V0),M) -> msg_t.sender_id(M) ~= V0

~(__node.state(X) = node.waiting & __node.state(Y) = node.critical & node.lexord(V0,__node.request_ts(X,X),X,__node.request_ts(Y,Y),Y))

__node.state(V0) = node.critical & Y:host_id ~= V0 -> __node.ts(Y) > __node.request_ts(V0,V0)

Y:host_id ~= V0 -> (__node.request_ts(V0,V0) > 0 -> __node.request_ts(Y,V0) <= __node.request_ts(V0,V0))

__node.request_ts(Y,V0) <= __node.ts(V0)

__net.sent(S,node.sock.id(Y),M) & msg_t.kind(M) = request & msg_t.sender_id(M) = V0 & __node.request_ts(V0,V0) > 0 -> msg_t.ts(M) <= __node.request_ts(V0,V0)

__net.sent(S,node.sock.id(Y),M) & msg_t.kind(M) = request -> msg_t.ts(M) > 0

__net.sent(S,node.sock.id(Y),M) & msg_t.kind(M) = release & msg_t.sender_id(M) = V0 -> __node.request_ts(Y,V0) <= msg_t.ts(M) & (__node.request_ts(V0,V0) > 0 -> msg_t.ts(M) < __node.request_ts(V0,V0))

__net.sent(S,node.sock.id(Y),M) & msg_t.kind(M) = request & msg_t.sender_id(M) = V0 & __node.request_ts(Y,V0) > 0 -> __node.request_ts(Y,V0) <= msg_t.ts(M)

__net.sent(S,node.sock.id(Y),M) -> __node.reply_ts(Y,msg_t.sender_id(M)) <= msg_t.ts(M)

__net.sent(__fml:src,node.sock.id(__prm:V0),__fml:msg)

__net.sent(__fml:src,node.sock.id(__prm:V0),M) -> __fml:msg <= M

__new_fml:x < __fml:y

__new_fml:x < Y -> __fml:y <= Y

timestamp.succ(__new_fml:x,__fml:y)

msg_t.kind(__loc:outgoing_nd) = msg_t.kind(__loc:outgoing)

msg_t.ts(__loc:outgoing_nd) = msg_t.ts(__loc:outgoing)

msg_t.sender_id(__loc:outgoing_nd) = __prm:V0

msg_t.kind(__loc:outgoing_nd_a) = msg_t.kind(__m_loc:outgoing)

msg_t.sender_id(__loc:outgoing_nd_a) = msg_t.sender_id(__m_loc:outgoing)

msg_t.ts(__loc:outgoing_nd_a) = node.ts(__prm:V0)

~__ts0_a | msg_t.sender_id(__loc:outgoing_nd_b) = msg_t.sender_id(__m_loc:outgoing_a)

~__ts0_a | msg_t.ts(__loc:outgoing_nd_b) = msg_t.ts(__m_loc:outgoing_a)

~__ts0_a | msg_t.kind(__loc:outgoing_nd_b) = reply

~__ts0_a | (__net.sent(node.sock.id(__ts0__new_prm:V0),__ts0__new_fml:dst,M) -> M < __ts0__new_fml:msg)

~__ts0_a_a | __node.client_state(__new_prm:V0_a) = node.waiting

~__ts0_a_a | __node.client_state(__X) = node.critical

__ts0_a_a | false

node.sock.id(X) = node.sock.id(Y) -> X = Y

timestamp.succ(X,Z) -> X < Z & ~(X < Y & Y < Z)

T:timestamp < U & U < V -> T < V

~(T:timestamp < U & U < T)

T:timestamp < U | T = U | U < T

0:timestamp <= X

msg_t.kind(X) = msg_t.kind(Y) & msg_t.sender_id(X) = msg_t.sender_id(Y) & msg_t.ts(X) = msg_t.ts(Y) -> X = Y


assert: ~false
