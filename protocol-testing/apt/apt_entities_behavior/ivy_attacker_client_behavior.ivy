#lang ivy1.7

include order
include file

action endpoint_to_pid(src:ip.endpoint) returns (pid:endpoint_id) = {
# This creates the sockets and also a TLS instance to be used by `the_cid`.
# TODO: the TLS instance should be created dynamically when the application
# layer creates a connection. 

# Here we have a bunch of conversions that map between cid's, IP
# endpoints, TLS instances and host ids. TODO: This is a mess and
# should be done in a more systematic way.

# Get the host id associated to an ip endpoint. 

action endpoint_to_pid(src:ip.endpoint) returns (pid:endpoint_id) = {
    if src = attacker.ep {
        pid := endpoint_id.malicious_server;
    } 
    # else if src = client_alt {
    #     pid:= endpoint_id.client_alt;
    # } else if src = client_vn {
    #     pid:= endpoint_id.client_vn;
    # } 
}


# Get the IP endpoint associated to a host id and socket number.

action socket_endpoint(host:endpoint_id,s:stream_data_net.socket) returns (src:ip.endpoint) = {
    src := attacker.ep; # if host = endpoint_id.attacke else (client_vn if version_negociated else client_alt)
}

# Get the socket number associated to an IP endpoint.

action endpoint_to_socket(src:ip.endpoint) returns (socket:stream_data_net.socket) = {
    if src = attacker.ep {
        socket := sock_attacker;
    } 
    # else if src = client_alt {
    #     socket := sock_alt;
    # } else if src = client_vn {
    #     socket := sock_vn;
    # } 
}
action tls_id_to_src(tls_id:tls_api.id) returns (src:ip.endpoint) = {
    src := attacker.ep; # if tls_id = attacker.tls_id else (client_vn if tls_id = attacker.tls_id & version_negociated else server.ep);
}

    
# Get the destination IP endpoint associated to a TLS instance
# TODO: this shouldn't be needed.

action tls_id_to_dst(tls_id:tls_api.id) returns (dst:ip.endpoint) = {
    dst := server.ep if tls_id = attacker.tls_id else attacker.ep;
}

# Returns true if an IP endpoint is controlled by the generator.
# TODO: shouldn't be needed.

action dst_is_generated(dst:ip.endpoint) returns (res:bool) = {
    res := dst = attacker.ep; # | dst = client_alt | dst = client_vn
}

action dst_is_generated_tls(dst:ip.endpoint) returns (res:bool) = {
    res := dst = attacker.ep; # | dst = client_alt | dst = client_vn
}

# Returns the TLS instance associated to a destination IP endppoint.
# TODO: shouldn't be needed.

action dst_tls_id(dst:ip.endpoint) returns (tls_id:tls_api.id) = {
    tls_id := attacker.tls_id;
}

action src_tls_id(src:ip.endpoint) returns (tls_id:tls_api.id) = {
    tls_id := attacker.tls_id;
    # if src = attacker.ep 
    # else second_client.tls_id; #TODO can cause error server vn eg
}