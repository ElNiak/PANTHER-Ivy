#lang ivy1.7 

include collections

object packet = {
    
    type this 

    instance idx : unbounded_sequence
    instance arr : array(idx,this) 

    # Normal behavior

    action handle(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    ## Man in the middle

    action forward_to(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action replay_to(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action drop(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action drop_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action drop_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action modify(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action modify_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action modify_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action delay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action delay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action duplicate_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action duplicate_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action reorder_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    action reorder_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:this) = {
        require false; 
    }

    ## White noise

    # 1. Denial-of-Service (DoS) Attacks

    action flood(src:ip.endpoint,dst:ip.endpoint, pkt:this) = {
        require false; 
    }
}


function num_queued_packets(C:ip.endpoint) : packet.idx
function queued_packets(C:ip.endpoint) : packet.arr

after init {
    num_queued_packets(C) := 0;
    queued_packets(C) := packet.arr.empty;
}

action enqueue_packet(src:ip.endpoint,dst:ip.endpoint,pkt:packet) = {
    queued_packets(dst) := queued_packets(dst).append(f);
    num_queued_packets(dst) := queued_packets(dst).end; 
}