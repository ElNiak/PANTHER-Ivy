#lang ivy1.7

include quic_frame

object ping_frame = {
    ...

    # (0xtbd) 
    object malicious_frame = {
        # unknown_frame  ping_frame frames are a varianping_frameping_frame and contains nothing
        variant this of ping_frame = struct {
            data: stream_data
        }
    } 
}

object ping_frame = {
    ...
    object malicious_frame = {
        ...
        
        action handle_maliciously(f:ping_frame.malicious_frame)

        around handle_maliciously 
        {
            current_time := time_api.c_timer.now_millis_last_bp;
##            call show_current_time_debug_event(current_time);
            ...
            call enqueue_ping_frame(f);
        }
    }
}


object ping_frame = {
    ...
    object ping = {
        ...
        action handle_maliciously(f:ping_frame.ping)

        around handle_maliciously {
            current_time := time_api.c_timer.now_millis_last_bp;
##            call show_current_time_debug_event(current_time);
            ...
            call enqueue_ping_frame(f);
        }
    }
}

object ping_frame = {
    ...
    object pong = {
        ...
        action handle_maliciously(f:ping_frame.pong)

        around handle_maliciously {
            if _generating {
                require f.data = ping_data; # TODO
            } else {
                current_time := time_api.c_timer.now_millis_last_bp;
##                call show_current_time_debug_event(current_time);
                enough_wait := current_time < 3000;
                require enough_wait;
            }
            require f.data.end = 4;
            require ping_frame_pending;
            ...
            ping_frame_pending := false;
            timestamp_frame_pending := true;
            call enqueue_ping_frame(f);
        }
    }
}

object ping_frame = {
    ...
    object timestamp = {
        ...
        action handle_maliciously(f:ping_frame.timestamp)

        around handle_maliciously {
            if _generating {
                f.time := time_api.c_timer.now_millis;
            } else {
                estimated_latency := time_api.c_timer.now_millis - f.time;
                call show_estimated_latency(estimated_latency);
            }
            require timestamp_frame_pending;
            ...
            timestamp_frame_pending := false;
            call enqueue_ping_frame(f);
        }
    }
}
