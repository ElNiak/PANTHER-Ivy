#lang ivy1.7


# Initial state
# -------------

# The history variables are initialized as follows.  Initially, no
# connections have been seen and no packets have been sent or
# acknowledged.


object packet = {
   ...

    object encrypted_quic_packet = {
        variant this of packet = struct {
            head_byte : stream_pos, # [2]
            pversion : version, # [3]
            dst_cid : cid, # [4]
            src_cid : cid, # [5]
            token_len : stream_pos, # [6]
            token : stream_data, # [6]
            payload_len : stream_pos, # [6]
            seq_num : pkt_num, # [7]
            payload : stream_data # [8]
        }

        #Hamid
        #instance retired_cids : array(idx, cid_seq)
        #Hamid

        instance idx : unbounded_sequence
        instance arr : array(idx,this) 

        action long(pkt:this) returns(res:bool) = {
            res := bvand(0x80,pkt.head_byte) ~= 0;
        }

    }
}


object packet = {
    ...

    object encrypted_quic_packet = {
        ...

        action forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet)
        around forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
            require _generating;
            if _generating {
                require pkt.payload.end > 0;
                require is_encrypted_quic_packet_received(dst,pkt);
                require encrypted_quic_packets_received_last_round(dst).end > 0;
                require mim_agent.nat_configured;
                require src = mim_agent.ep_server & dst = mim_agent.ep_client;
                require src ~= dst;
                call show_last_packet_received(src,dst,pkt);
            }
            ...
            if _generating {
                call enqueue_packet(src,dst,pkt);
                is_encrypted_quic_packet_received(dst,pkt) := false; 
            }
        }
        
        action forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet)
        around forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
            require _generating;
            if _generating {
                require is_encrypted_quic_packet_received(dst,pkt);
                require pkt.payload.end > 0;
                require src = mim_agent.ep_client & dst = mim_agent.ep_server;
                require encrypted_quic_packets_received_last_round(dst).end > 0;
                require mim_agent.nat_configured;
                require src ~= dst;
                require mim_agent.ep_server.addr ~= 0;  # must have a client address to send to
            }
            ...
            require _generating;
            if _generating {
                call enqueue_packet(src,dst,pkt);
                is_encrypted_quic_packet_received(dst,pkt) := false;        
            }
        }

        import action show_last_packet_received(src:ip.endpoint,dst:ip.endpoint, pkt:packet)
        import action show_last_packets_received(src:ip.endpoint,dst:ip.endpoint, pkt:packet.encrypted_quic_packet.arr)

        action replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet)
        around replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
            require _generating;
            if _generating {
                require pkt.payload.end > 0;
               require is_encrypted_quic_packet_received(dst,pkt);
               require encrypted_quic_packets_received_last_round(dst).end > 0;
               require mim_agent.nat_configured;
               require src = mim_agent.ep_server & dst = mim_agent.ep_client;
               require src ~= dst;
               call show_last_packet_received(src,dst,pkt);
           }
           ...
           if _generating {
               call enqueue_packet(src,dst,pkt);
               is_encrypted_quic_packet_received(dst,pkt) := true; 
           }
        }

        action replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet)
        around replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
            require _generating;
            if _generating {
                require is_encrypted_quic_packet_received(dst,pkt);
                require pkt.payload.end > 0;
                require src = mim_agent.ep_client & dst = mim_agent.ep_server;
                require encrypted_quic_packets_received_last_round(dst).end > 0;
                require mim_agent.nat_configured;
                require src ~= dst;
                require mim_agent.ep_server.addr ~= 0;  # must have a client address to send to
            }
            ...
            if _generating {
                call enqueue_packet(src,dst,pkt);
                is_encrypted_quic_packet_received(dst,pkt) := true;        
            }
        }

        action modify(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet)
        around modify(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet) {
            require _generating;
            if _generating {
                require is_encrypted_quic_packet_received(dst,pkt);
                require pkt.payload.end > 0;
                require src = mim_agent.ep_client & dst = mim_agent.ep_server |
                        src = mim_agent.ep_server & dst = mim_agent.ep_client;
                require encrypted_quic_packets_received_last_round(dst).end > 0;
                require mim_agent.nat_configured;
                require src ~= dst;
                require mim_agent.ep_server.addr ~= 0;  # must have a client address to send to
            }
            ...
            if _generating {
                call enqueue_packet(src,dst,pkt);
                is_encrypted_quic_packet_received(dst,pkt) := true;        
            }
        }
    }
}

function encrypted_quic_packets_received_last_round(C:ip.endpoint) : packet.encrypted_quic_packet.arr 
function encrypted_quic_packet_received_last_round(C:ip.endpoint) : packet.encrypted_quic_packet
relation is_encrypted_quic_packet_received(C:ip.endpoint, P:packet.encrypted_quic_packet) 

after init {
    encrypted_quic_packets_received_last_round(C) := packet.encrypted_quic_packet.arr.empty;
}

after receiving_packet(src:ip.endpoint,dst:ip.endpoint,pkt:packet) {
    packets_received_last_round(dst) := packets_received_last_round(dst).append(pkt);
    packets_received(dst)            := packets_received(dst).append(pkt);
    if some(cf:packet.encrypted_quic_packet) pkt *> cf  {
        encrypted_quic_packet_received_last_round(dst)  := cf;
        is_encrypted_quic_packet_received(dst,cf)       := true;
        encrypted_quic_packets_received_last_round(dst) := encrypted_quic_packets_received_last_round(dst).append(cf);
    } 
}

after update_received_packet(src:ip.endpoint,dst:ip.endpoint) {
    # is_encrypted_quic_packet_received(dst) := false;
    encrypted_quic_packets_received_last_round(dst) := packet.encrypted_quic_packet.arr.empty;
}