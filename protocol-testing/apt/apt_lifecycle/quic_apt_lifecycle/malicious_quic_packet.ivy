#lang ivy1.7


# Initial state
# -------------

# The history variables are initialized as follows.  Initially, no
# connections have been seen and no packets have been sent or
# acknowledged.


object packet = {
    ...

    object quic_packet = {

        ...

        action forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet)
        around forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
            # require _generating;
            require pkt.payload.end > 0;
            require mim_agent.nat_configured;
            require is_quic_packet_received(dst,pkt) & ~quic_packet_forwarded(dst,pkt);
            require src ~= dst;
            require dst = mim_agent.ep_client & src = mim_agent.ep_server;
            ...
            call enqueue_packet(src,dst,pkt);
            is_quic_packet_received(dst,pkt) := false;
            quic_packet_forwarded_last_round(dst) := quic_packet_forwarded_last_round(dst) + 1;
        }
        
        action forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet)
        around forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
            # require _generating;
            require pkt.payload.end > 0;
            require mim_agent.nat_configured;
            require is_quic_packet_received(dst,pkt) & ~quic_packet_forwarded(dst,pkt);
            require src ~= dst;
            require dst = mim_agent.ep_server & src = mim_agent.ep_client;
            ...
            call enqueue_packet(src,dst,pkt);
            is_quic_packet_received(dst,pkt) := false;
            quic_packet_forwarded_last_round(dst) := quic_packet_forwarded_last_round(dst) + 1;
        }

        action replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet)
        around replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
            # require _generating;
            require pkt.payload.end > 0;
            require is_quic_packet_received(dst,pkt);
            require is_quic_packet_received(dst,pkt) & ~quic_packet_forwarded(dst,pkt);
            require mim_agent.nat_configured;
            require src = mim_agent.ep_server & dst = mim_agent.ep_client;
            require src ~= dst;
            ...
            call enqueue_packet(src,dst,pkt);
            is_quic_packet_received(dst,pkt) := true;
            quic_packet_forwarded_last_round(dst) := quic_packet_forwarded_last_round(dst) + 1;
        }

        action replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet)
        around replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
            # require _generating;
            require pkt.payload.end > 0;
            require is_quic_packet_received(dst,pkt) & ~quic_packet_forwarded(dst,pkt);
            require mim_agent.nat_configured;
            require src = mim_agent.ep_client & dst = mim_agent.ep_server;
            require src ~= dst;
            ...
            call enqueue_packet(src,dst,pkt);
            is_quic_packet_received(dst,pkt) := true;
            quic_packet_forwarded_last_round(dst) := quic_packet_forwarded_last_round(dst) + 1;
        }

        action modify(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet)
        around modify(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet) {
            # require _generating;
            require pkt.payload.end > 0;
            require mim_agent.nat_configured;
            require dst = mim_agent.ep_server & src = mim_agent.ep_client | 
                    dst = mim_agent.ep_client & src = mim_agent.ep_server;
            require is_quic_packet_received(dst,pkt) & ~quic_packet_forwarded(dst,pkt);
            require src ~= dst;
            ...
            call enqueue_packet(src,dst,pkt);
            is_quic_packet_received(dst,pkt) := false;
            quic_packet_forwarded_last_round(dst) := quic_packet_forwarded_last_round(dst) + 1;
        }   
    }
}


function quic_packets_received_last_round(C:ip.endpoint) : packet.quic_packet.arr 
function quic_packet_received_last_round(C:ip.endpoint,P:stream_pos) : packet.quic_packet
relation is_quic_packet_received(C:ip.endpoint, P:packet.quic_packet) 
relation quic_packet_forwarded(C:ip.endpoint, P:packet.quic_packet)
function quic_packet_forwarded_last_round(C:ip.endpoint) : stream_pos

after init {
    quic_packets_received_last_round(C) := packet.quic_packet.arr.empty;
}

after enqueue_packet(src:ip.endpoint,dst:ip.endpoint,pkt:packet) {
    if some(cf:packet.quic_packet) pkt *> cf  {
        quic_packet_forwarded(dst,cf) := true;
    } 
    call show_num_queued_packets(dst,num_queued_packets(dst));
    call show_num_packets_received_last_round(dst,num_packets_received_last_round(dst));
}

after receiving_packet(src:ip.endpoint,dst:ip.endpoint,pkt:packet, pkt_num: stream_pos) {
    if some(cf:packet.quic_packet) pkt *> cf  {
        quic_packet_received_last_round(dst,pkt_num)  := cf;
        is_quic_packet_received(dst,cf)               := true;
        quic_packets_received_last_round(dst)         := quic_packets_received_last_round(dst).append(cf);
    } 
}

after update_received_packet(src:ip.endpoint,dst:ip.endpoint) {
    # is_quic_packet_received(dst) := false;
    quic_packets_received_last_round(dst) := packet.quic_packet.arr.empty;
    quic_packet_forwarded_last_round(dst) := 0;
}