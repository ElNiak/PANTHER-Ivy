#lang ivy1.7


# Packet protocol state
# ---------------------

object packet = {
   ...

    object malicious_stream_data_packet = {
        variant this of packet = struct {
            payload : stream_data
        }
        instance idx : unbounded_sequence
        instance arr : array(idx,this) 
    }
}
 #lang ivy1.7

# Packet protocol state
# ---------------------

object packet = {
    ...

    object malicious_stream_data_packet = {

        ...

        action forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.malicious_stream_data_packet)
        around forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.malicious_stream_data_packet) {
            # require _generating;
            require pkt.payload.end > 0;
            require mim_agent.nat_configured;
            require is_malicious_stream_data_packet_received(dst,pkt) & ~malicious_stream_data_packet_forwarded(dst,pkt);
            require src ~= dst;
            require dst = mim_agent.ep_client & src = mim_agent.ep_server;
            ...
            call enqueue_packet(src,dst,pkt);
            is_malicious_stream_data_packet_received(dst,pkt) := false;
            malicious_stream_data_packet_forwarded_last_round(dst) := malicious_stream_data_packet_forwarded_last_round(dst) + 1;
        }
        
        action forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.malicious_stream_data_packet)
        around forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.malicious_stream_data_packet) {
            # require _generating;
            require pkt.payload.end > 0;
            require mim_agent.nat_configured;
            require is_malicious_stream_data_packet_received(dst,pkt) & ~malicious_stream_data_packet_forwarded(dst,pkt);
            require src ~= dst;
            require dst = mim_agent.ep_server & src = mim_agent.ep_client;
            ...
            call enqueue_packet(src,dst,pkt);
            is_malicious_stream_data_packet_received(dst,pkt) := false;
            malicious_stream_data_packet_forwarded_last_round(dst) := malicious_stream_data_packet_forwarded_last_round(dst) + 1;
        }

        action replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.malicious_stream_data_packet)
        around replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.malicious_stream_data_packet) {
            # require _generating;
            require pkt.payload.end > 0;
            require is_malicious_stream_data_packet_received(dst,pkt);
            require is_malicious_stream_data_packet_received(dst,pkt) & ~malicious_stream_data_packet_forwarded(dst,pkt);
            require mim_agent.nat_configured;
            require src = mim_agent.ep_server & dst = mim_agent.ep_client;
            require src ~= dst;
            ...
            call enqueue_packet(src,dst,pkt);
            is_malicious_stream_data_packet_received(dst,pkt) := true;
            malicious_stream_data_packet_forwarded_last_round(dst) := malicious_stream_data_packet_forwarded_last_round(dst) + 1;
        }

        action replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.malicious_stream_data_packet)
        around replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.malicious_stream_data_packet) {
            # require _generating;
            require pkt.payload.end > 0;
            require is_malicious_stream_data_packet_received(dst,pkt) & ~malicious_stream_data_packet_forwarded(dst,pkt);
            require mim_agent.nat_configured;
            require src = mim_agent.ep_client & dst = mim_agent.ep_server;
            require src ~= dst;
            ...
            call enqueue_packet(src,dst,pkt);
            is_malicious_stream_data_packet_received(dst,pkt) := true;
            malicious_stream_data_packet_forwarded_last_round(dst) := malicious_stream_data_packet_forwarded_last_round(dst) + 1;
        }

        action modify(src:ip.endpoint,dst:ip.endpoint,pkt:packet.malicious_stream_data_packet)
        around modify(src:ip.endpoint,dst:ip.endpoint,pkt:packet.malicious_stream_data_packet) {
            # require _generating;
            require pkt.payload.end > 0;
            require mim_agent.nat_configured;
            require dst = mim_agent.ep_server & src = mim_agent.ep_client | 
                    dst = mim_agent.ep_client & src = mim_agent.ep_server;
            require is_malicious_stream_data_packet_received(dst,pkt) & ~malicious_stream_data_packet_forwarded(dst,pkt);
            require src ~= dst;
            ...
            call enqueue_packet(src,dst,pkt);
            is_malicious_stream_data_packet_received(dst,pkt) := false;
            malicious_stream_data_packet_forwarded_last_round(dst) := malicious_stream_data_packet_forwarded_last_round(dst) + 1;
        }   
    }
}


function malicious_stream_data_packets_received_last_round(C:ip.endpoint) : packet.malicious_stream_data_packet.arr 
function malicious_stream_data_packet_received_last_round(C:ip.endpoint,P:stream_pos) : packet.malicious_stream_data_packet
relation is_malicious_stream_data_packet_received(C:ip.endpoint, P:packet.malicious_stream_data_packet) 
relation malicious_stream_data_packet_forwarded(C:ip.endpoint, P:packet.malicious_stream_data_packet)
function malicious_stream_data_packet_forwarded_last_round(C:ip.endpoint) : stream_pos

after init {
    malicious_stream_data_packets_received_last_round(C) := packet.malicious_stream_data_packet.arr.empty;
}

after enqueue_packet(src:ip.endpoint,dst:ip.endpoint,pkt:packet) {
    if some(cf:packet.malicious_stream_data_packet) pkt *> cf  {
        malicious_stream_data_packet_forwarded(dst,cf) := true;
    } 
    call show_num_queued_packets(dst,num_queued_packets(dst));
    call show_num_packets_received_last_round(dst,num_packets_received_last_round(dst));
}

after receiving_packet(src:ip.endpoint,dst:ip.endpoint,pkt:packet, pkt_num: stream_pos) {
    if some(cf:packet.malicious_stream_data_packet) pkt *> cf  {
        malicious_stream_data_packet_received_last_round(dst,pkt_num)  := cf;
        is_malicious_stream_data_packet_received(dst,cf)               := true;
        malicious_stream_data_packets_received_last_round(dst)         := malicious_stream_data_packets_received_last_round(dst).append(cf);
    } 
}

after update_received_packet(src:ip.endpoint,dst:ip.endpoint) {
    # is_malicious_stream_data_packet_received(dst) := false;
    malicious_stream_data_packets_received_last_round(dst) := packet.malicious_stream_data_packet.arr.empty;
    malicious_stream_data_packet_forwarded_last_round(dst) := 0;
}