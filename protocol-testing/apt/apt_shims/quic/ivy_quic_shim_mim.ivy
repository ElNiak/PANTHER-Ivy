#lang ivy1.7

include quic_packet
include apt_shim
include ping_shim

# The QUIC test shim
# ------------------


# Packet event shim
# -----------------
#
# When a packet even is generated, we encode the packet contents and
# route it to the network. The encoding involves serializing the packet
# to its byte-level representation, and then applying protection.
#
# TODO: We do not actually generate protection layer events. Instead,
# whenever a generated packet event occurs, we deterministically
# serialize and encrypt_quic the packet for transmission. This is not quite sound,
# since in fact there are a few choices to be made in the encoding (such
# as the number of bytes in the sequence number encoding) and these choices
# should in principle be randomized. We have not done this, however, since we
# are more interested in the higher-layer aspects of the protocol.
#
# TODO: We don't coalesce multiple packets into a datagram. To do
# this, we could enqueue packets (as frames are enqueued) and then
# randomly choose the moment to encode them.
#
# Note: To encode the packet, we need a reference sequence number,
# which is the sequence number of the most recently transmitted packet
# on the same connection. This information is obtained from the protocol
# state by the procedure `reference_pkt_num`.
#
# Note: We assume the each endpoint the tester can transmit on has been
# mapped to an open socket. This map is provided by `endpoint_to_socket_mim`.
#

after init {
    is_mim := true;
}

object packet = {
    ...
    object quic_packet = {
        ...
        after forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet.arr) {
            if _generating {
               var idx := pkt.begin;
                var pkts_mim := quic_prot.arr.empty;
                while idx < pkt.end {
                    # packet_forwarded(pkt.value(idx)) := true;
                    var spkt := quic_packet_serdes.to_bytes(pkt.value(idx));
                    pkts_mim := pkts_mim.append(spkt);
                    #TODO allow forwarding coalesed packet or not
                    idx := idx.next; 
                }; 
                call quic_net.send(endpoint_id.man_in_the_middle,endpoint_to_socket_mim(src),dst,pkts_mim); # TODO endpoint_to_socket_mim
                mim_agent.last_packet_forwarded_to(mim_agent.ep_client) := mim_agent.last_packet_forwarded_to(mim_agent.ep_client) + 1;
            }
        }
        
        after forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.quic_packet.arr) {
            if _generating {
                var idx := pkt.begin;
                var pkts_mim := quic_prot.arr.empty;
                while idx < pkt.end {
                    # packet_forwarded(pkt.value(idx)) := true;
                    var spkt := quic_packet_serdes.to_bytes(pkt.value(idx));
                    pkts_mim := pkts_mim.append(spkt);
                    #TODO allow forwarding coalesed packet or not
                    idx := idx.next; 
                }; 
                call quic_net.send(endpoint_id.man_in_the_middle,endpoint_to_socket_mim(src),dst,pkts_mim); # TODO endpoint_to_socket_mim
                mim_agent.last_packet_forwarded_to(mim_agent.ep_server) := mim_agent.last_packet_forwarded_to(mim_agent.ep_server) + 1;
            }
        }
    }

    object encrypted_quic_packet = {
        ...
        after forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet.arr) {
            if _generating {
                var idx := pkt.begin;
                var pkts_mim := quic_prot.arr.empty;
                while idx < pkt.end {
                    packet_forwarded(pkt.value(idx)) := true;
                    var spkt := quic_encrypted_packet_serdes.to_bytes(pkt.value(idx));
                    pkts_mim := pkts_mim.append(spkt);
                    #TODO allow forwarding coalesed packet or not
                    idx := idx.next; 
                }; 
                if mim_agent.encrypted_padding_packet_to_forward_to(mim_agent.ep_client,1000).end > 0 {
                    pkts_mim := pkts_mim.append(mim_agent.encrypted_padding_packet_to_forward_to(mim_agent.ep_client,1000));
                    mim_agent.encrypted_padding_packet_to_forward_to(mim_agent.ep_client,1000) := stream_data.empty;  # help solver
                } else {
                    pkts_mim := pkts_mim.append(mim_agent.encrypted_padding_packet_to_forward_to(mim_agent.ep_client,mim_agent.last_encrypted_packet_forwarded_to(mim_agent.ep_client)));
                };
                call quic_net.send(endpoint_id.man_in_the_middle,endpoint_to_socket_mim(src),dst,pkts_mim); # TODO endpoint_to_socket_mim
                mim_agent.encrypted_packet_to_forward_to(mim_agent.ep_client,mim_agent.last_encrypted_packet_forwarded_to(mim_agent.ep_client)) := packet.encrypted_quic_packet.arr.empty;  # help solver
                mim_agent.last_encrypted_packet_forwarded_to(mim_agent.ep_client) := mim_agent.last_encrypted_packet_forwarded_to(mim_agent.ep_client) + 1;
                packets_forwarded(pkt) := true;
            }
        }
        
        after forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet.arr) {
            if _generating {
                var idx := pkt.begin;
                var pkts_mim := quic_prot.arr.empty;
                while idx < pkt.end {
                    packet_forwarded(pkt.value(idx)) := true;
                    call show_payload_len(pkt.value(idx).payload.end);
                    var spkt := quic_encrypted_packet_serdes.to_bytes(pkt.value(idx));
                    pkts_mim := pkts_mim.append(spkt);
                    idx := idx.next; 
                };
                if mim_agent.encrypted_padding_packet_to_forward_to(mim_agent.ep_server,1000).end > 0 {
                    pkts_mim := pkts_mim.append(mim_agent.encrypted_padding_packet_to_forward_to(mim_agent.ep_server,1000));
                    mim_agent.encrypted_padding_packet_to_forward_to(mim_agent.ep_server,1000) := stream_data.empty;  # help solver
                } else {
                    pkts_mim := pkts_mim.append(mim_agent.encrypted_padding_packet_to_forward_to(mim_agent.ep_server,mim_agent.last_encrypted_packet_forwarded_to(mim_agent.ep_server)));
                };
                call quic_net.send(endpoint_id.man_in_the_middle,endpoint_to_socket_mim(src),dst,pkts_mim); # TODO endpoint_to_socket_mim
                mim_agent.encrypted_packet_to_forward_to(mim_agent.ep_server,mim_agent.last_encrypted_packet_forwarded_to(mim_agent.ep_server)) := packet.encrypted_quic_packet.arr.empty;  # help solver
                mim_agent.last_encrypted_packet_forwarded_to(mim_agent.ep_server) := mim_agent.last_encrypted_packet_forwarded_to(mim_agent.ep_server) + 1;
                packets_forwarded(pkt) := true;
            }
        }

        after replay_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet.arr) {
            if _generating {
                var idx := pkt.begin;
                var pkts_mim := quic_prot.arr.empty;
                while idx < pkt.end {
                    packet_forwarded(pkt.value(idx)) := true;
                    var spkt := quic_encrypted_packet_serdes.to_bytes(pkt.value(idx));
                    pkts_mim := pkts_mim.append(spkt);
                    idx := idx.next; 
                };
                call quic_net.send(endpoint_id.man_in_the_middle,endpoint_to_socket_mim(src),dst,pkts_mim); # TODO endpoint_to_socket_mim
            }
        }

        after replay_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.encrypted_quic_packet.arr) {
            if _generating {
                var idx := pkt.begin;
                var pkts_mim := quic_prot.arr.empty;
                while idx < pkt.end {
                    packet_forwarded(pkt.value(idx)) := true;
                    var spkt := quic_encrypted_packet_serdes.to_bytes(pkt.value(idx));
                    pkts_mim := pkts_mim.append(spkt);
                    idx := idx.next; 
                };
                call quic_net.send(endpoint_id.man_in_the_middle,endpoint_to_socket_mim(src),dst,pkts_mim); # TODO endpoint_to_socket_mim
            }
        }
    }
}
import action show_payload_len(pkt:stream_pos)