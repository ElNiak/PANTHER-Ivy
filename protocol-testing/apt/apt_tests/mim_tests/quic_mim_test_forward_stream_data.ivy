#lang ivy1.7

include order
include file
# include random_value

include ivy_stream_data_mim
include ivy_stream_data_target
include ivy_stream_data_attacker

include ivy_stream_data_shim_mim
include apt_shim

include ivy_man_in_the_middle_behavior


# NB: need bigger timeout (at least 90 sec)

after init {
    is_mim_standalone := true;
    call mim_agent.configure_NAT_attack_bidir;
}


object packet = {
    ...
    
    object malicious_stream_data_packet = {
        ...
        before forward_to_client(src:ip.endpoint,dst:ip.endpoint,pkt:packet.malicious_stream_data_packet) {
            call show_last_cppkt_forwarded_to_server_debug_event(mim_agent.last_cppkt_forwarded_to_server);
            call show_last_cppkt_forwarded_to_client_debug_event(mim_agent.last_cppkt_forwarded_to_client);
            if _generating {
                require mim_client_target.ep.addr ~= 0;  # must have a client address to send to
                require src = mim_server_target.ep;
                require dst = mim_client_target.ep;
                require pkt.payload = mim_agent.ppkt_to_be_forwarded_to_client(mim_agent.last_cppkt_forwarded_to_client).value(0); # TODO check
            } 
        }
        
        before forward_to_server(src:ip.endpoint,dst:ip.endpoint,pkt:packet.malicious_stream_data_packet) {
            call show_last_cppkt_forwarded_to_server_debug_event(mim_agent.last_cppkt_forwarded_to_server);
            call show_last_cppkt_forwarded_to_client_debug_event(mim_agent.last_cppkt_forwarded_to_client);
            if _generating {
                require mim_server_target.ep.addr ~= 0;  # must have a client address to send to
                require dst = mim_server_target.ep;
                require src = mim_client_target.ep;
                require pkt.payload = mim_agent.ppkt_to_be_forwarded_to_server(mim_agent.last_cppkt_forwarded_to_server).value(0); # TODO check       
            } 
        }
    }
}

import action show_last_cppkt_forwarded_to_client_debug_event(x:stream_pos)
import action show_last_cppkt_forwarded_to_server_debug_event(x:stream_pos)

export packet.malicious_stream_data_packet.forward_to_client
export packet.malicious_stream_data_packet.forward_to_server

attribute packet.malicious_stream_data_packet.forward_to_server.weight = "5"
attribute packet.malicious_stream_data_packet.forward_to_client.weight = "15"


# Final check
#
# When the test is complete, the tester calls the special action `_finalize`.
# We use this action to make some heuristic checks, for example that some
# data was actually received from the server. We can add advice to this
# action with additional checks.

export action _finalize = {
    # chris TODO 
    call mim_agent.reset_NAT;
    require mim_agent.last_cppkt_forwarded_to_server > 0;
    require mim_agent.last_cppkt_forwarded_to_client > 0;
    require mim_agent.last_cppkt_forwarded_to_client = mim_agent.cppkt_forwarded_to_client;
    require mim_agent.last_cppkt_forwarded_to_server = mim_agent.cppkt_forwarded_to_server;
}


