#lang ivy1.7

# a fake deserializer for BGP

object bgp_deser = {}

<<< member

    class `bgp_deser`;

>>>

<<< impl

    class `bgp_deser` : public ivy_binary_deser_128 {
        enum {bgp_s_init,
              bgp_s_frame,
              bgp_s_time,
              bgp_s_payload} state;
        int token_length = 4;
        long frame_type;
        int fence=0;
        int current_bgp_size = 0;
        int payload_length = 12;

    public:
        bgp_deser(const std::vector<char> &inp) : ivy_binary_deser_128(inp),state(bgp_s_init) {
        }
        virtual void  get(int128_t &res) {
            switch (state) {
            case bgp_s_init:
            {
                std::cerr << "bgp_s_init 1\n";
                state = bgp_s_payload;
            }
            break;
            case bgp_s_frame:
            {
                std::cerr << "bgp_s_frame 1\n";
                getn(res,1);
                std::cerr << "payload_length = " << payload_length << "\n";
                //state = bgp_s_time;
            }
            break;
            case bgp_s_time:
            {
                std::cerr << "bgp_s_time 1\n";
                int128_t res_inter = 0;
                getn(res_inter,8);
                res = reverse_bytes(res_inter);
                payload_length -= 8;
                std::cerr << "payload_length = " << payload_length << "\n";
            }
            break;
            default:
                std::cerr << "bgp_deser 3\n";  
                throw deser_err();
            }
        }


        int128_t reverse_bytes(int128_t bytes)
        {
            int128_t aux = 0;
            uint8_t byte;
            int i;

            for(i = 0; i < 128; i+=8)
            {
                byte = (bytes >> i) & 0xff;
                aux |= byte << (128 - 8 - i);
            }
            return aux;
        }

        virtual int open_tag(const std::vector<std::string> &tags) {
            if (state == bgp_s_payload || state == bgp_s_init) {
                int128_t ft;
                ivy_binary_deser_128::getn(ft,1); // could be bigger
                frame_type = ft;
                std::cerr << "recv frame_type = " << frame_type << "\n";
                if (frame_type == 0x01) {
                    std::cerr << "bgp_s_frame 2\n";
                    state = bgp_s_frame;
                    return 0;
                }
                if (frame_type == 0x02) { //JF
                    std::cerr << "bgp_s_frame 3\n";
                    state = bgp_s_frame;
                    return 1;
                }
                if (frame_type == 0x03) {
                    std::cerr << "bgp_s_time 4\n";
                    state = bgp_s_time;
                    return 2;
                }
                //std::cerr << "saw tag " << ft << "\n";  
            }
            std::cerr << "state          = " << state << "\n";  
            std::cerr << "bgp_deser 2\n";  
            throw deser_err();
        }

        virtual bool open_list_elem() {
            if (state == bgp_s_payload) {
                std::cerr << "bgp_s_payload bgp_deser 2\n";  
                //state = bgp_s_time;
                return payload_length-- > 0;
            }
                //return more(1);
            if ( state == bgp_s_frame || state == bgp_s_init) {
                 std::cerr << "bgp_s_init bgp_deser 2\n";  
                if (current_bgp_size == 5) {
                    //state = bgp_s_time;
                    return false;
                }
                current_bgp_size += 1;
                payload_length -= 1;
                return true;
            }
            if(state == bgp_s_time){
                std::cerr << "bgp_s_time bgp_deser 2\n";  
                return false;
            }
                
            std::cerr << "bgp_deser 1\n";  
            throw deser_err();
        }

        void open_list() {
        }
        void close_list() {
            if (state == bgp_s_payload) {
                state = bgp_s_init;
            }
        }
        void close_list_elem() {}

        virtual void close_tag() {
            state = bgp_s_payload;
        }

        ~bgp_deser(){}
    };

>>>
